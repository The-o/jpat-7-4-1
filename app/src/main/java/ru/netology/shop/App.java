/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.netology.shop;

import java.util.Collection;

import ru.netology.shop.exceptions.NotEnoughProductData;
import ru.netology.shop.exceptions.NotEnoughProductsException;
import ru.netology.shop.filter.ComplexFilter;
import ru.netology.shop.filter.ComplexFilterBuilder;
import ru.netology.shop.filter.KeywordsFilterBuilder;
import ru.netology.shop.filter.MaxPriceFilter;
import ru.netology.shop.filter.MinPriceFilter;
import ru.netology.shop.product.AppleIPhoneBuilder;
import ru.netology.shop.product.PhoneBuilder;
import ru.netology.shop.product.Product;
import ru.netology.shop.product.ProductBuilder;
import ru.netology.shop.product.SmartPhoneBuilder;

public class App {


    private static ProductStorage initStore() {
        ProductStorage store = new ProductStorage();
        try {
            store.addProduct(
                new AppleIPhoneBuilder<>()
                    .setModel("13")
                    .setMemoryAmount(256)
                    .setPrice(89990)
                    .build(),
                10
            );
            store.addProduct(
                new AppleIPhoneBuilder<>()
                    .setModel("13")
                    .setMemoryAmount(512)
                    .setPrice(109990)
                    .build(),
                20
            );
            store.addProduct(
                new AppleIPhoneBuilder<>()
                    .setModel("13 mini")
                    .setMemoryAmount(512)
                    .setPrice(99990)
                    .build(),
                23
            );
            store.addProduct(
                new SmartPhoneBuilder<>()
                    .setManufacturer("Samsung")
                    .setName("Galaxy")
                    .setModel("S21")
                    .setMemoryAmount(128)
                    .setPrice(64990)
                    .build(),
                13
            );
            store.addProduct(
                new SmartPhoneBuilder<>()
                    .setManufacturer("Samsung")
                    .setName("Galaxy")
                    .setModel("A51")
                    .setMemoryAmount(64)
                    .setPrice(19490)
                    .build(),
                27
            );
            store.addProduct(
                new SmartPhoneBuilder<>()
                    .setManufacturer("Samsung")
                    .setName("Galaxy")
                    .setModel("S21 Ultra")
                    .setMemoryAmount(256)
                    .setPrice(101990)
                    .build(),
                19
            );
            store.addProduct(
                new PhoneBuilder<>()
                    .setManufacturer("Philips")
                    .setName("Xenium")
                    .setModel("E182")
                    .setPrice(2690)
                    .build(),
                13
            );
            store.addProduct(
                new PhoneBuilder<>()
                    .setManufacturer("Philips")
                    .setName("Xenium")
                    .setModel("E580")
                    .setPrice(4490)
                    .build(),
                13
            );
            store.addProduct(
                new ProductBuilder<>()
                    .setName("Bluetooth-гарнитура Apple AirPods Pro")
                    .setPrice(19490)
                    .addKeyword("apple")
                    .addKeyword("airpods")
                    .addKeyword("наушники")
                    .addKeyword("bluetooth")
                    .build(),
                5
            );
            store.addProduct(
                new ProductBuilder<>()
                    .setName("Умная лампа ELARI Smart LED Filament")
                    .setPrice(899)
                    .addKeyword("лампа")
                    .addKeyword("led")
                    .build(),
                20
            );
            store.addProduct(
                new ProductBuilder<>()
                    .setName("Аккумулятор ADATA S10000")
                    .setPrice(1299)
                    .addKeyword("аккумулятор")
                    .build(),
                15
            );
            
        } catch (NotEnoughProductData e) {
            e.printStackTrace();
        }

        return store;
    }
    public static void main(String[] args) {
        ProductStorage store = initStore();
        ProductStorage cart = new ProductStorage();

        System.out.printf("В магазине есть: %n%n%s%n", store);

        System.out.print("Посетитель ищет смартфон ценой от 10000 до 90000.");
        ComplexFilter<Product> complexFilter = new ComplexFilterBuilder<Product>()
            .addFilter(
                new KeywordsFilterBuilder<Product>()
                    .addKeyword("смартфон")
                    .build()
            ).addFilter(
                new MinPriceFilter<Product>(10000)
            ).addFilter(
                new MaxPriceFilter<Product>(90000)
            ).build();

        Collection<Product> filteredProducts = complexFilter.filter(store.getProducts());
        System.out.println("Находит: " + filteredProducts);

        Product chosenProduct = filteredProducts.stream().findFirst().orElseThrow();
        System.out.println("Выбирает: " + chosenProduct + " ценой " + chosenProduct.getPrice());
        System.out.println("Кладёт в корзину 5 штук.");
        try {
            store.retrieveProduct(chosenProduct, 5);
            cart.addProduct(chosenProduct, 5);
        } catch (NotEnoughProductsException e) {
            e.printStackTrace();
        }

        System.out.printf("Теперь в корзине: %n%n%s%n", cart);
        System.out.printf("Теперь в магазине: %n%n%s%n", store);
    }

}
